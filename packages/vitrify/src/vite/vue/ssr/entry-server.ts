import { createApp } from '../main.js'
import { renderToString } from 'vue/server-renderer'
import type { FastifyInstance } from 'fastify'
// import * as ApolloSSR from '@vue/apollo-ssr'
// import { ApolloClients } from '@vue/apollo-composable'
// import serialize from 'serialize-javascript'

import { onSetup } from 'virtual:vitrify-hooks'

export const setup = async ({ fastify }: { fastify: FastifyInstance }) => {
  if (onSetup?.length) {
    for (const setup of onSetup) {
      await setup(fastify)
    }
  }
  return fastify
}

const initializeApp = async (url, ssrContext) => {
  const onRenderedList = []
  Object.assign(ssrContext, {
    _modules: new Set(),
    _meta: {},
    onRendered: (fn) => {
      onRenderedList.push(fn)
    }
  })

  const { app, router, routes } = await createApp('server', ssrContext)
  // set the router to the desired URL before rendering

  router.push({ path: url })
  ssrContext.initialState = {}

  onRenderedList.forEach((fn) => {
    fn()
  })

  await router.isReady()

  return { app, router, routes }
}

export const getRoutes = async () =>
  (
    await initializeApp('/', {
      ssr: false,
      req: { headers: {}, url: '/' },
      res: {}
    })
  ).routes

export async function render(url, manifest, ssrContext) {
  const { app, router } = await initializeApp(url, ssrContext)

  // passing SSR context object which will be available via useSSRContext()
  // @vitejs/plugin-vue injects code into a component's setup() that registers
  // itself on ctx.modules. After the render, ctx.modules would contain all the
  // components that have been instantiated during this render call.
  const ctx = {
    __qMetaList: []
  }
  let html = await renderToString(app, ctx)
  // html = injectSsrContext(html, ssrContext)
  // the SSR manifest generated by Vite contains module -> chunk/asset mapping
  // which we can then use to determine what files need to be preloaded for this
  // request.
  const preloadLinks = renderPreloadLinks(ctx.modules, manifest)

  return [html, preloadLinks]
}

function renderPreloadLinks(modules, manifest) {
  let links = ''
  const seen = new Set()
  modules.forEach((id) => {
    const files = manifest[id]
    if (files) {
      files.forEach((file) => {
        if (!seen.has(file)) {
          seen.add(file)
          links += renderPreloadLink(file)
        }
      })
    }
  })
  return links
}

function renderPreloadLink(file) {
  if (file.endsWith('.js')) {
    return `<link rel="modulepreload" crossorigin href="${file}">`
  } else if (file.endsWith('.css')) {
    return `<link rel="stylesheet" href="${file}">`
  } else if (file.endsWith('.woff')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff" crossorigin>`
  } else if (file.endsWith('.woff2')) {
    return ` <link rel="preload" href="${file}" as="font" type="font/woff2" crossorigin>`
  } else if (file.endsWith('.gif')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/gif">`
  } else if (file.endsWith('.jpg') || file.endsWith('.jpeg')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/jpeg">`
  } else if (file.endsWith('.png')) {
    return ` <link rel="preload" href="${file}" as="image" type="image/png">`
  } else {
    // TODO
    return ''
  }
}
